"""
Generate a pdf report from a dictionnary
"""
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.lib.colors import Color


class PDFReport():
    
    def __init__(self, report_dict, outfilepath):
        """
        Generate the PDF report from the `report_dict` generated by the 
        operationhistory class. 
        The report is generated by creating a list of flowables that are added 
        in chronological order, starting from title, subtitle and then ordered list 
        of operations. 

        Parameters
        ----------
        report_dict : dictionnary
            Dictionnary generated from the json and API calls by the operationhistory module.
        outfilepath : str
            Path to the pdf report file to generate.

        Returns
        -------
        None.

        """
        self.report_dict = report_dict
        
        
        self.titleText = self.report_dict['Title']
        self.subtitleText = self.report_dict['Subtitle']
        self.flowables = []
        
        self.outfilepath = outfilepath
        self.doc = SimpleDocTemplate(outfilepath,pagesize=letter,
                                     rightMargin=72,leftMargin=72,
                                     topMargin=72,bottomMargin=18)
        
        ## uninteresting fields not to be displayed
        self.discardFields = ['machineId', 'userId', 'inheritorId', 'id', 
                              'projectId', 'sampleId',
                              'machineName', 'operatorName', 'sampleName', 'projectName', 
                              'operationDate', 'operation-samples']

        self.MakeHeadersFlowables()
        
        self.MakeParentsFloables()
        
        self.MakeOperationFlowables()
        
        
        self.BuildDoc()


    def MakeHeadersFlowables(self):
        """
        Format and adds the headers to the list of flowables. 
        """
        psHeaderText = ParagraphStyle('Hed0', fontSize=20, alignment=TA_CENTER, borderWidth=3)
        psSubHeaderText = ParagraphStyle('Hed1', fontSize=18, alignment=TA_CENTER, borderWidth=3)
        
        paragraphReportHeader = Paragraph(self.titleText, psHeaderText)
        paragraphReportSubHeader = Paragraph(self.subtitleText, psSubHeaderText)
        
        self.flowables.append(paragraphReportHeader)
        self.flowables.append(Spacer(1,psHeaderText.fontSize))
        self.flowables.append(paragraphReportSubHeader)
        self.flowables.append(Spacer(1,psSubHeaderText.fontSize))
    
    def MakeParentsFloables(self):
        if len(self.report_dict['Parents'])>0:
            parentsData = [['Parent Samples', '']]
            for par_i in self.report_dict['Parents']:
            # for par_i in Operation_Dict.report_dict['Parents']:
                parentsData.append(['', par_i[1]])
            tblstyle = TableStyle([
                ('LINEBELOW', (0,0), (-1,0), 1, Color(0, 0, 0)),
                ])
            parentsTable = Table(parentsData, colWidths='*', spaceBefore=10)
        
            tblstyle = TableStyle([
                ('LINEBELOW', (0,0), (-1,0), 1, Color(0, 0, 0)),
                ])
            parentsTable.setStyle(tblstyle)
            self.flowables.append(parentsTable)
            
            
    def MakeOperationFlowables(self):
        """
        Loops through the list of operation and adds them in the flowables as tables.
        Each operation consists of two tables, one for the machine settings, the other one 
        for the samples settings. 
        """
        ### loop through all operations
        for op in self.report_dict['Operations']:
            
            ### header of the operation is the machine name
            machineName = op['machineName']
            
            operatorName = op['operatorName']
            operationDate = op['operationDate']
            data = [
                    [machineName, operationDate],
                    ['operator', operatorName]
                    ]
            
            tblstyle = TableStyle([
                ('BACKGROUND', (0,0), (-1,0), Color(85/255, 153/255, 255/255)),
                ('ALIGN', (0,0), (0,0), 'LEFT'),
                ('ALIGN', (1,0), (-1,-1), 'RIGHT')
                ])
            tbl = Table(data, colWidths='*', spaceBefore=10)
            tbl.setStyle(tblstyle)
            self.flowables.append(tbl)
        
            ### list all operation data
            operationData = []
            for param in op:
                if param not in self.discardFields:
                    operationData.append([param, op[param]])
            operationTable = Table(operationData, colWidths='*')
            
            self.flowables.append(operationTable)
            
            
            #### list all sample-specific data
            sampleData = [['Sample Data', '']]
            sampleData.append(['Project Name', op['projectName']])
            for param in op['operation-samples'][0]:
                if param not in self.discardFields:
                    sampleData.append([param, op['operation-samples'][0][param]])
            sampleTable = Table(sampleData, colWidths='*', spaceBefore=10)
        
            tblstyle = TableStyle([
                ('LINEBELOW', (0,0), (-1,0), 1, Color(0, 0, 0)),
                ])
            sampleTable.setStyle(tblstyle)
            self.flowables.append(sampleTable)
            
        
    def BuildDoc(self):
        self.doc.build(self.flowables)